package com.github.celldynamics.jcurandomwalk;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import org.apache.commons.lang3.ArrayUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.celldynamics.jcudarandomwalk.matrices.sparse.SparseMatrixDevice;

import jcuda.jcusolver.JCusolver;
import jcuda.jcusparse.JCusparse;
import jcuda.runtime.JCuda;

/**
 * Solver test.
 * 
 * <p>Uses data generated by modified
 * {@link SparseMatrixDevice#luSolve1(com.github.celldynamics.jcudarandomwalk.matrices.dense.DenseVectorDevice, boolean, int, float)}
 * and {@link CudaTest#testLuSolve()}
 * 
 * @author baniuk
 *
 */
public class SolverRun {
  static final Logger LOGGER = LoggerFactory.getLogger(SolverRun.class.getName());

  /**
   * @param args
   * @throws IOException
   */
  public static void main(String[] args) throws IOException {
    int[] rowInd;
    int[] colInd;
    float[] val;
    float[] b;

    // read back data
    {
      BufferedReader bf = new BufferedReader(new FileReader("data/rowInd.txt"));
      ArrayList<Integer> rowIndA = new ArrayList<>();
      String line;
      while ((line = bf.readLine()) != null) {
        rowIndA.add(Integer.parseInt(line));
      }
      bf.close();
      rowInd = ArrayUtils.toPrimitive(rowIndA.toArray(new Integer[0]));
      LOGGER.debug(ArrayUtils.toString(rowInd));
    }
    {
      BufferedReader bf = new BufferedReader(new FileReader("data/colInd.txt"));
      ArrayList<Integer> colIndA = new ArrayList<>();
      String line;
      while ((line = bf.readLine()) != null) {
        colIndA.add(Integer.parseInt(line));
      }
      bf.close();
      colInd = ArrayUtils.toPrimitive(colIndA.toArray(new Integer[0]));
      LOGGER.debug(ArrayUtils.toString(colInd));
    }
    {
      BufferedReader bf = new BufferedReader(new FileReader("data/val.txt"));
      ArrayList<Float> valA = new ArrayList<>();
      String line;
      while ((line = bf.readLine()) != null) {
        valA.add(Float.parseFloat(line));
      }
      bf.close();
      val = ArrayUtils.toPrimitive(valA.toArray(new Float[0]));
      LOGGER.debug(ArrayUtils.toString(val));
    }
    {
      BufferedReader bf = new BufferedReader(new FileReader("data/b.txt"));
      ArrayList<Float> bA = new ArrayList<>();
      String line;
      while ((line = bf.readLine()) != null) {
        bA.add(Float.parseFloat(line));
      }
      bf.close();
      b = ArrayUtils.toPrimitive(bA.toArray(new Float[0]));
      LOGGER.debug(ArrayUtils.toString(b));
    }

    JCuda.setExceptionsEnabled(true);
    JCusparse.setExceptionsEnabled(true);
    JCusolver.setExceptionsEnabled(true);

  }

}
